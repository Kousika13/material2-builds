{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.5-02f5256');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n  declarations: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {Subscription, combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {empty} from 'rxjs';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone } from '@angular/core';\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {switchMap} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators';\nimport {tap} from 'rxjs/operators';\nimport {finalize} from 'rxjs/operators';\nimport {map} from 'rxjs/operators';\nimport {share} from 'rxjs/operators';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs';\nimport {forkJoin} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {throwError as observableThrow} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {PortalModule} from '@angular/cdk/portal';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {filter} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {Observable, SubscriptionLike} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {defer} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    // If there was an attempt to assign a value before init, use it to set the\n    // initial selection, otherwise check the `checked` state of the toggles.\n    if (typeof this._tempValue !== 'undefined') {\n      this._setSelectionByValue(this._tempValue);\n      this._tempValue = undefined;\n    } else {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs';\nimport {Subscriber} from 'rxjs';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","type","ViewportRuler","Directionality","decorators","Optional","MatTabHeader","propDecorators","_tabListContainer","ViewChild","args","_tabList","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","_tabLinks","forEach","link","disableRipple","Component","selector","exportAs","template","styles","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","aria-orientation","animations","matStepperAnimations","verticalStepTransition","MatStepper","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","offsetWidth","_inkBarPositioner","show","requestAnimationFrame","_setStyles","style","visibility","hide","positions","inkBar","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_destroyed","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","horizontalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_stateChanged","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","iconElement","_setSvgAttributes","_toSvgElement","svg","_svgElementFromString","MatIconRegistry","str","div","innerHTML","ELEMENT_NODE","cloneNode","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","svgText","_createSvgElementForSingleIcon","responseText","iconSet","iconSource","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","openPanel","MatAutocompleteTrigger","_canOpen","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","withPush","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","underlineRef","_inputContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}