{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_treeNode: CdkTreeNode<T>,\n              _tree: CdkTree<T>,\n              _renderer: Renderer2,\n              _element: ElementRef,\n              @Optional() _dir: Directionality) {\n      super(_treeNode, _tree, _renderer, _element, _dir);\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewEncapsulation,\n  IterableDiffers,\n} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\n    super(_differs, _changeDetectorRef);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\n    super(_tree, _treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.5-d603b8b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    this._positionStrategy.positionChanges.subscribe(({connectionPair}) => {\n      if (this.autocomplete) {\n        this.autocomplete._classList['mat-autocomplete-panel-above'] =\n            connectionPair.originY === 'top';\n      }\n    });\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef.nativeElement, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n    this._appearance = value;\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance !== 'outline') {\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","Attribute","Input","MatTreeNodeDef","template","CdkTreeNodeDef","TemplateRef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","_treeNode","_renderer","_element","_dir","CdkTreeNodePadding","Renderer2","Directionality","Optional","level","indent","MatTree","_changeDetectorRef","Component","styles","MatTreeNodeToggle","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","positions","_inkBarPositioner","element","inkBar","nativeElement","style","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","MatTabLabel","templateRef","viewContainerRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_setStyles","_vertical","MatSlider","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_onInputFocusChange","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","_focusRipple","fadeOut","_ripple","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRipple","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_appearance","appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","startWidth","gapWidth","startEls","gapEls","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}