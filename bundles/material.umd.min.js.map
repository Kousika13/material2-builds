{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(\n        filter(() => !!this._tooltipInstance),\n        takeUntil(this._destroyed)\n    ).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.3-ccbab87');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n      this.autocomplete.closed.emit();\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Whether the drawer container should have a backdrop while one of the sidenavs is open. */\n  @Input()\n  get hasBackdrop() {\n    if (this._hasBackdrop == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value: any) {\n    this._hasBackdrop = value == null ? null : coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    if (newValue) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      this._elementRef.nativeElement.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  constructor(elementRef: ElementRef, private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input() color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const input = this._datepickerInput;\n    const color = this.color || (input ? input._getThemePalette() : undefined);\n\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef.nativeElement)\n      .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        } else {\n          this._keyManager.updateActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase\n    implements OnInit, OnDestroy, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ElementRef, Inject, Optional, NgZone, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ThemePalette} from '@angular/material/core';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {DOCUMENT} from '@angular/common';\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    this._animationState = 'visible';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    this._animationState = 'hidden';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input() appearance: MatFormFieldAppearance = 'legacy';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_changeDetectorRef","_viewportRuler","_dir","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","Subscription","EMPTY","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","EventEmitter","indexFocused","tslib_1.__extends","MatTabHeader","_super","Object","defineProperty","prototype","this","value","coerceNumberProperty","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","emit","focusIndex","ngAfterContentInit","dirChange","change","observableOf","resize","realign","requestAnimationFrame","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","index","tab","toArray","disabled","tabIndex","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","call","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","selected","active","optional","MatStepHeader","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","_MatTabHeaderMixinBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","withPositions","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_classList","newElevation","_previousElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","MatIconRegistry","_loadSvgIconFromConfig","_fetchUrl","url","svgText","_createSvgElementForSingleIcon","_loadSvgIconSetFromConfig","svgElement","_svgElementFromString","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","safeUrl","_httpClient","getMatIconNoHttpProviderError","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_getValidDateOrNull","_dateAdapter","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","parse","_dateFormats","_lastValueValid","isValid","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","catchError","forkJoin","foundIcon","selectedChange","yearSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","getYear","_init","_selectedYear","_minDate","_maxDate","_focusActiveCell","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","createDate","month","getMonth","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarYears","yearsPerPage","_getActiveCell","_matCalendarBody","yearName","getYearName","MatCalendarCell","_shouldEnableYear","dateFilter","firstOfYear","addCalendarDays","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","addCalendarMonths","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","AutofillMonitor","_monitoredElements","observableEmpty","info","subject","animationName","isAutofilled","unlisten","_info","MatAutofill","_autofillMonitor","matAutofill","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","updateActiveItem","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_closeKeyEventStream","_outsideClickStream","MatAutocompleteTrigger","autocomplete","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","displayWith","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","content","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","appearance","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","tslib_1.__assign","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}