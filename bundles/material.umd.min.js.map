{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.1.0-f00c8a8');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off.\n    this._tabListContainer.nativeElement.scrollLeft = 0;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTreeNodePadding","CdkTreeNodePadding","MatTree","_super","tslib_1.__extends","type","Component","args","selector","exportAs","template","host","class","role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","propDecorators","MatTreeNodeToggle","_this","apply","this","arguments","recursive","Directive","(click)","CdkTreeNodeToggle","Input","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNode","MatTreeNodeOutlet","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","prototype","_flattenNode","node","level","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabBody","_elementRef","_dir","changeDetectorRef","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","ngOnDestroy","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","NgZone","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","platform","globalOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","_ripplesGloballyDisabled","rippleConfig","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","indent","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_a","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_right","opened","mode","_width","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","fromEvent","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_left","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","MatTooltip","_isTooltipVisible","_tooltipInstance","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","_updatePosition","_detach","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","_updateTooltipMessage","updatePosition","_setTooltipClass","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_onHide","_isHandset","delay","_hideTimeoutId","_showTimeoutId","afterHidden","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","menu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","MatMenuTrigger","setElevation","depth","parentMenu","_resetMenu","triggersSubmenu","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","hasBackdrop","backdropClass","setPositionClasses","posX","connectionPair","posY","_setPosition","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_cleanUpSubscriptions","_closeSubscription","_hoverSubscription","_menuClosingActions","backdrop","parentClose","_parentMenu","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","_handleHover","asapScheduler","MatMenu","_isAnimating","_getPortal","_portal","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","menuData","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","hasModifierKey","altKey","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","_ariaDescriber","hammerLoader","_message","_manualListeners","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeDescription","describe","_tooltipClass","removeEventListener","MatListOption","MatSelectionList","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","_attached","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","lazyContent","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_startAnimation","_resetAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_menuCloseSubscription","_handleTouchStart","_menu","reason","_destroyMenu","closeMenu","_initMenu","menuOpen","_isInteractiveList","navList","list","_getListType","_list","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","MatExpansionModule","CdkAccordionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","optionSelected","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","MatAutocomplete","_isOpen","showPanel","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","badgeElement","_badgeElement","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","MatHint","[class.mat-right]","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}