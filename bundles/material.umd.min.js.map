{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-2f579b3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","MatTab","prototype","ngOnInit","this","_contentPortal","TemplatePortal","_content","_viewContainerRef","type","Component","args","selector","template","inputs","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","exportAs","propDecorators","textLabel","Input","_MatTabMixinBase","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_this","_super","call","tslib_1.__extends","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","ngOnDestroy","closed","unsubscribe","Directive","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","Object","defineProperty","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","styles","animations","host","class","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","_config","_applyConfigDefaults","config","snackBarRef","_attach","component","afterDismissed","_openedSnackBarRef","containerInstance","enter","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","_live","announce","politeness","MatSnackBar","open","message","action","data","openFromComponent","SimpleSnackBar","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","MatSnackBarContainer","viewContainerRef","containerRef","instance","snackBarConfig","_createOverlay","container","MatSnackBarRef","injector","_createInjector","portal","contentRef","attachComponentPortal","_breakpointObserver","observe","Breakpoints","Handset","detachments","take","matches","overlayElement","overlayConfig","OverlayConfig","direction","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","Number","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","hasOwnProperty","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","setTimeout","_open","dispose","dismissedByAction","asObservable","_onEnter","InjectionToken","MatSnackBarConfig","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","[@contentFade]","_animationState","_portalOutlet","Error","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_parentSnackBar","_snackBarRefAtThisLevel","parent","_markRadiosForCheck","MatRadioGroup","_isInitialized","_touch","_updateRadioButtonNames","_radios","radio","_updateSelectedRadioFromValue","isAlreadySelected","MatRadioChange","_markForCheck","_changeDetector","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","ContentChildren","MatRadioButton","descendants","align","_MatRadioGroupMixinBase","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","nextUniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_labelPosition","_disabled","_required","focusVia","focusOrigin","_onInputFocusChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_focusRipple","fadeOut","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","MatTooltip","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","_tooltipInstance","scrollableViewProperties","isOverlayClipped","isVisible","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","_disposeTooltip","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","_updateTooltipMessage","updatePosition","_setTooltipClass","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MatRadioGroupBase","_name","_checkSelectedRadioButton","menu","MatMenuTrigger","_checkMenu","reason","_destroyMenu","_parentMenu","triggersSubmenu","_hoverSubscription","_hovered","_menuItemInstance","_openedByMouse","openMenu","_cleanUpSubscriptions","_menuOpen","toggleMenu","closeMenu","_portal","lazyContent","menuData","_closeSubscription","_menuClosingActions","_initMenu","MatMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","_positionSubscription","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","removeDescription","_isTooltipVisible","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFilter","controlValue","matDatepickerFilter","_validator","Validators","compose","_parseValidator","_minValidator","_maxValidator","_filterValidator","_lastValueValid","_dateAdapter","createMissingDateImplError","_dateFormats","_localeSubscription","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","deserialize","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","matDatepickerParse","text","matDatepickerMin","actual","matDatepickerMax","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","attributes","attribute","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","Host","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","_i","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}