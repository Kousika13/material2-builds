{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.2.0-df0bfdc');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /** @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      info.unlisten();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach(info => {\n      info.unlisten();\n      info.subject.complete();\n    });\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement)\n        .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    this._animationState = 'visible';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    this._animationState = 'hidden';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<void>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next();\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /** Dismisses the bottom sheet. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T>;\n  open<T, D = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T>;\n\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input() appearance: MatFormFieldAppearance = 'legacy';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /** @deletion-target 7.0.0 */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["tslib_1.__extends","MatTabHeader","_super","Object","defineProperty","prototype","this","_selectedIndex","value","coerceNumberProperty","_selectedIndexChanged","_focusIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","length","_updatePagination","_changeDetectorRef","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","selectFocusedIndex","emit","focusIndex","ngAfterContentInit","_this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","requestAnimationFrame","_realignInkBar","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","_isValidIndex","indexFocused","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","_MatTabHeaderMixinBase","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","call","_onDestroy","Subject","_disableRipple","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","active","optional","MatStepHeader","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","provide","ErrorStateMatcher","useExisting","MatStepper","apply","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","ContentChildren","MatHorizontalStepper","aria-orientation","role","animations","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepperIntl","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","connect","disconnect","DataSource","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","_MatSliderMixinBase","MatSliderModule","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","[style.margin-left.px]","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","_drawers","ContentChild","MatDrawerContainer","MatSidenavModule","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","MatSelect","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_createTooltip","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","push","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","[attr.aria-controls]","[attr.aria-expanded]","[class.mat-expanded]","[@expansionHeight]","MatExpansionPanelHeader","MatExpansionModule","CdkAccordionModule","MatAccordion","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","_activeDate","_dateAdapter","addCalendarMonths","getMonth","addCalendarYears","_goToDateInView","_focusActiveCell","MatCalendar","_handleCalendarBodyKeydownInMultiYearView","getYear","yearsPerPage","_getValidDateOrNull","isDateInstance","isValid","DateAdapter","MAT_DATE_FORMATS","minDate","maxDate","dateFilter","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContent","_calendar","[class.mat-datepicker-content-touch]","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","date","sameDate","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_createPopup","keydownEvents","MatDialog","startAt","startView","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","format","display","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","hideToggle","CdkAccordion","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","MatTextareaAutosize","_setMinHeight","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","_setMaxHeight","maxHeight","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","AutofillMonitor","MatInputModule","MatAutofill","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","getDate","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_startAt","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","firstChange","view","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","date1","date2","MatChip","MatChipRemove","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_selectable","_chipInput","chips","chip","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","BACKSPACE","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","selectViaInteraction","_blur","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","selectable","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","disableClose","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_startExitAnimation","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","_monitoredElements","observableEmpty","info","subject","animationName","unlisten","matAutofill","_minRows","_maxRows","MatButtonToggleGroupMultiple","[class.mat-button-toggle-vertical]","_MatButtonToggleGroupMixinBase","MatButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatButtonToggleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","ngZone","_removable","destroyed","removed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","_i","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatAutocompleteTrigger","clickTarget","formField","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","optionOffset","_getScrollTop","_setScrollTop","newScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","displayWith","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocompleteModule","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","appearance","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","reposition","tslib_1.__assign","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}