{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autofill.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.2.0-eebfce4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean { return this._panelOpen && this.autocomplete.showPanel; }\n  private _panelOpen: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') readonly onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') readonly onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown'> =\n      new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    } else if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getConnectedOverlayOrigin(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /** @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from './autofill';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {AutofillMonitor, MatAutofill} from './autofill';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [\n    MatAutofill,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatAutofill,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher, AutofillMonitor],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._isYearEnabled(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _isYearEnabled(year: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {empty as observableEmpty} from 'rxjs/observable/empty';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions: any = supportsPassiveEventListeners() ? {passive: true} : false;\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable()\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return observableEmpty();\n    }\n\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const listener = (event: AnimationEvent) => {\n      if (event.animationName === 'mat-input-autofill-start') {\n        element.classList.add('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: true});\n      } else if (event.animationName === 'mat-input-autofill-end') {\n        element.classList.remove('mat-input-autofilled');\n        result.next({target: event.target as Element, isAutofilled: false});\n      }\n    };\n\n    element.addEventListener('animationstart', listener, listenerOptions);\n    element.classList.add('mat-input-autofill-monitored');\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element) {\n    const info = this._monitoredElements.get(element);\n    if (info) {\n      info.unlisten();\n      element.classList.remove('mat-input-autofill-monitored');\n      element.classList.remove('mat-input-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach(info => {\n      info.unlisten();\n      info.subject.complete();\n    });\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[matAutofill]',\n})\nexport class MatAutofill implements OnDestroy, OnInit {\n  @Output() matAutofill = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef, private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement)\n        .subscribe(event => this.matAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      this.valueChange.emit(value);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n  private _value: any = null;\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** The currently selected button toggle, should match the value. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n  private _selected: MatButtonToggle | null = null;\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (this._isSingleSelector && value) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = value;\n\n    if (value && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n  private _checked: boolean = false;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n  private _value: any = null;\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(value: 'start' | 'end') {\n    this.labelPosition = (value == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    this._animationState = 'visible';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    this._animationState = 'hidden';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<void>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next();\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /** Dismisses the bottom sheet. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T>;\n  open<T, D = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T>;\n\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n  ThemePalette\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input() appearance: MatFormFieldAppearance = 'legacy';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): ThemePalette { return this.color; }\n  set dividerColor(value: ThemePalette) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this.floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /** @deletion-target 7.0.0 */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n\n    // @deletion-target Turn into required param in 6.0.0\n    @Optional() @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)\n        defaults?: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = defaults &&\n        typeof defaults.autoActiveFirstOption !== 'undefined' ?\n            defaults.autoActiveFirstOption :\n            false;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatTabHeader","prototype","ngAfterContentChecked","this","_tabLabelCount","_labelWrappers","length","_updatePagination","_changeDetectorRef","markForCheck","_selectedIndexChanged","_scrollToLabel","_selectedIndex","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","preventDefault","END","_focusLastTab","ENTER","SPACE","selectFocusedIndex","emit","focusIndex","ngAfterContentInit","_this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","requestAnimationFrame","_realignInkBar","merge","subscribe","ngOnDestroy","unsubscribe","_onContentChanges","_checkPaginationEnabled","Object","defineProperty","_focusIndex","value","_isValidIndex","indexFocused","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","Output","_MatTabHeaderMixinBase","MatTabNavBase","_MatTabNavMixinBase","mixinColor","MatTabNav","_ngZone","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","_backgroundColor","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","forEach","link","disableRipple","exportAs","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","state","visibility","transition","animate","verticalStepTransition","trigger","height","MatStepperIcon","templateRef","TemplateRef","name","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","provide","ErrorStateMatcher","useExisting","MatStepper","apply","arguments","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_destroyed","_stateChanged","ContentChildren","MatHorizontalStepper","aria-orientation","role","animations","matStepperAnimations","horizontalStepTransition","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatStepLabel","MatStepHeader","MatStepperIntl","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","ElementRef","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","_isNumberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","ceil","connect","disconnect","DataSource","show","_setStyles","hide","inkBar","left","offsetLeft","width","viewContainerRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_content","matTabsAnimations","translateTab","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_origin","_onTranslateTabStarted","e","toState","clientHeight","_onTranslateTabComplete","fromState","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","_subscribeToTabLabels","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabHeaderBase","MatSlider","step","thumbLabel","_thumbLabelDeprecated","tickInterval","_tickIntervalDeprecated","vertical","input","_sliderWrapper","_MatSliderMixinBase","MatSliderModule","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","[style.margin-right.px]","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","_drawers","ContentChild","MatDrawerContainer","MatSidenavModule","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","MatSelect","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_createTooltip","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","push","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","isAttached","_outlet","DomPortalOutlet","insertBefore","outletElement","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","_rowspan","coerceToNumber","MatGridTile","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getAttribute","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatListBase","_MatListMixinBase","MatListItemBase","DateAdapter","MAT_DATE_FORMATS","MatCalendar","minDate","maxDate","dateFilter","selectedChange","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContent","_calendar","_focusActiveCell","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","date","sameDate","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_createPopup","keydownEvents","MatDialog","startAt","startView","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","format","display","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","minHeight","_setTextareaStyle","MatTextareaAutosize","_setMaxHeight","maxHeight","maxRows","_cachedLineHeight","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","_setMinHeight","force","_previousValue","placeholderText","scrollHeight","minRows","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","AutofillMonitor","MatInputModule","MatAutofill","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","dateA11yLabel","getDate","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_isYearEnabled","firstOfYear","addCalendarDays","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","_dateFilterForViews","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","multi-year","firstChange","view","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_selectable","_chipInput","chips","chip","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","BACKSPACE","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","selectViaInteraction","_blur","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","disableClose","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","_startExitAnimation","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","$implicit","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","listenerOptions","supportsPassiveEventListeners","passive","_monitoredElements","observableEmpty","info","subject","animationName","unlisten","matAutofill","_minRows","_maxRows","[class.mat-button-toggle-vertical]","MatButtonToggleGroupMultiple","_MatButtonToggleGroupMixinBase","MatButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatButtonToggleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","ngZone","_removable","destroyed","removed","onRemove","_addHostClassName","_chipRipple","RippleRenderer","_i","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","toggleSelected","removable","DELETE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","clickTarget","formField","MatAutocompleteTrigger","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","optionOffset","_getScrollTop","_setScrollTop","newScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","recalculateLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","displayWith","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocompleteModule","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","labelOptions","appearance","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","floatPlaceholder","underlineRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","reposition","tslib_1.__assign","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}