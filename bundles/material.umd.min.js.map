{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {BehaviorSubject} from 'rxjs';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.5-0e37d6c');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n  declarations: [\n    MatCell,\n    MatCellDef,\n    MatColumnDef,\n    MatHeaderCell,\n    MatHeaderCellDef,\n    MatHeaderRow,\n    MatHeaderRowDef,\n    MatRow,\n    MatRowDef,\n    MatTable,\n  ],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {Subscription, combineLatest} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {empty} from 'rxjs';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {switchMap} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators';\nimport {tap} from 'rxjs/operators';\nimport {finalize} from 'rxjs/operators';\nimport {map} from 'rxjs/operators';\nimport {share} from 'rxjs/operators';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs';\nimport {forkJoin} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {throwError as observableThrow} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {PortalModule} from '@angular/cdk/portal';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {filter} from 'rxjs/operators';\nimport {startWith} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {Observable, SubscriptionLike} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {Subscription} from 'rxjs';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {defer} from 'rxjs';\nimport {of as observableOf} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {Subscription} from 'rxjs';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    // If there was an attempt to assign a value before init, use it to set the\n    // initial selection, otherwise check the `checked` state of the toggles.\n    if (typeof this._tempValue !== 'undefined') {\n      this._setSelectionByValue(this._tempValue);\n      this._tempValue = undefined;\n    } else {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {merge} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs';\nimport {Subscriber} from 'rxjs';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","type","ViewportRuler","Directionality","decorators","Optional","MatTabHeader","propDecorators","_tabListContainer","ViewChild","args","_tabList","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","_tabLinks","forEach","link","disableRipple","Component","selector","exportAs","template","styles","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","aria-orientation","animations","matStepperAnimations","verticalStepTransition","MatStepper","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","show","requestAnimationFrame","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_destroyed","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","horizontalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_stateChanged","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","MatSelect","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenu","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","iconElement","_setSvgAttributes","_toSvgElement","svg","_svgElementFromString","MatIconRegistry","str","div","innerHTML","ELEMENT_NODE","cloneNode","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_disabledChange","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","svgText","_createSvgElementForSingleIcon","responseText","iconSet","iconSource","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","getYear","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_yearSelected","yearsPerPage","_getActiveCell","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","openPanel","MatAutocompleteTrigger","_canOpen","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","withPush","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_emitSelectionChangeEvent","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","underlineRef","_inputContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","_active","_mostRecentViewValue","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}