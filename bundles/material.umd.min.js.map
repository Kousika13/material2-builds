{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.2.1-5a18ea6');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n      // Update the trigger, panel width and direction, in case anything has changed.\n      position.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(\n          this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n    this._closingActionsSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // @breaking-change 7.0.0 Remove this check once _ngZone is required. Also reconsider\n    // whether the `ngAfterContentChecked` below is still necessary.\n    if (this._ngZone) {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /**\n   * Updates the outline gap the new time the zone stabilizes.\n   * @breaking-change 7.0.0 Remove this method and only set the property once `_ngZone` is required.\n   */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._outlineGapCalculationNeededOnStable = true;\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => {\n      if (!this.disableClose) {\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","ElementRef","CdkTree","String","decorators","Attribute","args","role","Input","MatTreeNode","_MatTreeNodeMixinBase","MatTreeNodeDef","_super","tslib_1.__extends","Directive","selector","inputs","providers","provide","CdkTreeNodeDef","useExisting","data","MatNestedTreeNode","_elementRef","_tree","_differs","tabIndex","_this","call","this","Number","prototype","ngAfterContentInit","ngOnDestroy","exportAs","host","[attr.aria-expanded]","[attr.role]","class","CdkNestedTreeNode","CdkTreeNode","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatTreeNodeToggle","apply","arguments","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","animationDuration","_dir","changeDetectorRef","_dirChangeSubscription","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","MatTabBody","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","unsubscribe","complete","_onTranslateTabStarted","isCentering","nativeElement","clientHeight","_getLayoutDirection","animations","matTabsAnimations","translateTab","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","element","bindEvent","fromEvent","takeUntil","_stopInterval","runOutsideAngular","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","textContent","_currentTextContent","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","style","transform","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","NgZone","Platform","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","undefined","Inject","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","MatTabLink","_tabNavBar","ngZone","globalRippleOptions","_focusMonitor","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","enumerable","configurable","stopMonitoring","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","document","_document","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","mixinTabIndex","[attr.aria-level]","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","_animationDone","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","CdkFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","_MAT_INK_BAR_POSITIONER","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","MatSort","sortables","Map","start","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER_FACTORY","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_left","mode","_width","_right","opened","_contentMargins","_contentMarginChanges","MatDrawerContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","MatSpinner","animationMode","[style.width.px]","[style.height.px]","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","ESCAPE","disableClose","close","_animationEnd","_opened","onPositionChanged","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","_openedStream","openedStart","_closedStream","closedStart","viewportRuler","_element","backdropClick","_doCheckSubject","_validateDrawers","_updateContentMargins","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_onBackdropClicked","_closeModalDrawer","_canHaveBackdrop","_isShowingBackdrop","_updatePosition","_tooltipInstance","updatePosition","MatTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","_manualListeners","listener","removeEventListener","delay","showDelay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","hideDelay","isVisible","e","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_checkMenu","_handleHover","MatMenuTrigger","_handleTouchStart","_cleanUpSubscriptions","_closingActionsSubscription","_menuOpen","triggersSubmenu","_menuItemInstance","_parentMenu","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","menu","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","MatMenu","_startAnimation","_destroyMenu","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuModule","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","MAT_MENU_SCROLL_STRATEGY_FACTORY","_menuCloseSubscription","_menu","reason","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","MatExpansionModule","CdkAccordionModule","MatAccordion","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelHeader","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","getConnectedOverlayOrigin","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","accordion","_uniqueSelectionDispatcher","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","_headers","header","CdkAccordion","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","MatLabel","MatPlaceholder","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","wasOpen","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","destroyNode","_createBadgeElement","rootNode","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}