{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n  TemplateRef,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding, CdkTreeNode, CdkTree} from '@angular/cdk/tree';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Directive, Input, Optional, Renderer2, ElementRef} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_treeNode: CdkTreeNode<T>,\n              _tree: CdkTree<T>,\n              _renderer: Renderer2,\n              _element: ElementRef,\n              @Optional() _dir: Directionality) {\n      super(_treeNode, _tree, _renderer, _element, _dir);\n    }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ViewChild,\n  ViewEncapsulation,\n  IterableDiffers,\n} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef) {\n    super(_differs, _changeDetectorRef);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle, CdkTree, CdkTreeNode} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(_tree: CdkTree<T>, _treeNode: CdkTreeNode<T>) {\n    super(_tree, _treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.4-ba84d5b');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Attribute","Input","MatTreeNodeDef","template","CdkTreeNodeDef","TemplateRef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","_treeNode","_renderer","_element","_dir","CdkTreeNodePadding","Renderer2","Directionality","Optional","level","indent","MatTree","_changeDetectorRef","Component","styles","MatTreeNodeToggle","recursive","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_ngZone","_inkBarPositioner","MatInkBar","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","positions","inkBar","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatTabLabel","templateRef","viewContainerRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","[style.margin-right.px]","ScrollDispatcher","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","_tickInterval","toString","split","pop","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","maxScroll","_checkOverlayWithinViewport","MatSelect","_calculateOverlayScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","yearView","multiYearView","headerComponent","monthView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","defaultTabIndex","_isSingleSelector","parsedTabIndex","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}